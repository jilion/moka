// Generated by CoffeeScript 1.3.2-pre
(function() {
  var AppLoaded, AppNotLoaded, DOMContentLoadedString, LoadingApp, api, appLoadingStatus_, bindReady, buildAppLoader, doScrollCheck, doc, domDidLoad, domLoaded_, domReady, forceLoadApp_, internalReadyCallback_, isFunction, loadApp, loadApp_, loadApplication, loadScript, notifyObservers, onReady, onreadystatechangeString, prepareCalls_, preparesObservers_, readyObservers_, _window;

  doc = document;

  DOMContentLoadedString = "DOMContentLoaded";

  onreadystatechangeString = "onreadystatechange";

  _window = window;

  AppNotLoaded = 0;

  LoadingApp = 1;

  AppLoaded = 2;

  loadApp = null;

  readyObservers_ = [];

  preparesObservers_ = [];

  appLoadingStatus_ = AppNotLoaded;

  internalReadyCallback_ = null;

  domLoaded_ = false;

  prepareCalls_ = [];

  forceLoadApp_ = false;

  isFunction = function(arg) {
    return typeof arg === "function";
  };

  notifyObservers = function(obs) {
    var i;
    i = 0;
    while (i < obs.length) {
      obs[i]();
      i++;
    }
    return obs.length = 0;
  };

  loadApplication = function() {
    if (domLoaded_) {
      if (appLoadingStatus_ === AppNotLoaded) {
        return loadApp();
      }
    } else {
      return forceLoadApp_ = true;
    }
  };

  buildAppLoader = function() {
    return function(cb) {
      return loadApp_(function() {
        var i, method;
        notifyObservers(readyObservers_);
        i = 0;
        while (i < prepareCalls_.length) {
          method = window[namespace]["prepare"];
          method.apply(window, prepareCalls_[i]);
          i++;
        }
        applicationDidLoad();
        if (cb) {
          return cb();
        }
      });
    };
  };

  loadApp_ = function(callback) {
    console.log('load app');
    if (appLoadingStatus_ === AppLoaded) {
      callback();
    }
    if (appLoadingStatus_ !== AppNotLoaded) {
      return;
    }
    appLoadingStatus_ = LoadingApp;
    return loadScript(applicationURL(applicationOptions), function() {
      console.log('loaded');
      return window[privateNamespace]["init"](applicationOptions, function() {
        appLoadingStatus_ = AppLoaded;
        return callback();
      });
    });
  };

  domReady = function() {
    return function() {
      if (forceLoadApp_ || shouldLoadApplication()) {
        return loadApp(function() {
          return notifyObservers(preparesObservers_);
        });
      } else {
        return notifyObservers(readyObservers_);
      }
    };
  };

  loadScript = function(src, callback) {
    var _container, _element;
    if (src) {
      _container = doc.getElementsByTagName("head")[0] || doc.body;
      _element = doc.createElement("script");
      _element.type = "text/javascript";
      _element.src = src;
      _element.async = true;
      _element[onreadystatechangeString] = _element.onload = function() {
        var state;
        state = _element.readyState;
        if (!callback.done && (!state || /loaded|complete/.test(state))) {
          callback.done = true;
          return callback();
        }
      };
      return _container.appendChild(_element);
    } else {
      return callback();
    }
  };

  onReady = function(callback) {
    if (domLoaded_) {
      return callback();
    } else {
      internalReadyCallback_ = callback;
      return bindReady();
    }
  };

  domDidLoad = function() {
    var ready;
    ready = 0;
    if (doc.attachEvent && doc.readyState === "complete") {
      doc.detachEvent(onreadystatechangeString, domDidLoad);
      ready = 1;
    } else if (doc.addEventListener) {
      doc.removeEventListener(DOMContentLoadedString, domDidLoad, false);
      ready = 1;
    }
    if (ready && !domLoaded_) {
      domLoaded_ = true;
      if (internalReadyCallback_) {
        return internalReadyCallback_();
      }
    }
  };

  bindReady = function() {
    var toplevel;
    if (doc.addEventListener) {
      doc.addEventListener(DOMContentLoadedString, domDidLoad, false);
      return _window.addEventListener("load", domDidLoad, false);
    } else if (doc.attachEvent) {
      doc.attachEvent(onreadystatechangeString, domDidLoad);
      _window.attachEvent("onload", domDidLoad);
      toplevel = false;
      try {
        toplevel = !(_window.frameElement != null);
      } catch (_error) {}
      if (doc.docElement && doc.docElement.doScroll && toplevel) {
        return doScrollCheck();
      }
    }
  };

  doScrollCheck = function() {
    if (!domLoaded_) {
      try {
        doc.docElement.doScroll("left");
      } catch (e) {
        setTimeout(doScrollCheck, 1);
        return;
      }
      return domDidLoad();
    }
  };

  api = window[namespace] = {};

  api["ready"] = function(observer) {
    if (isFunction(observer)) {
      return readyObservers_.push(observer);
    }
  };

  api["prepare"] = function(arg1, arg2) {
    var observer;
    observer = (isFunction(arg1) ? arg1 : (isFunction(arg2) ? arg2 : null));
    if (appLoadingStatus_ === LoadingApp) {
      return prepareCalls_.push([arg1, arg2]);
    } else if (appLoadingStatus_ === AppNotLoaded) {
      if (shouldLoadApplication()) {
        if (observer) {
          preparesObservers_.push(observer);
        }
        if (domLoaded_) {
          return loadApp(function() {
            return notifyObservers(preparesObservers_);
          });
        }
      } else {
        if (observer) {
          if (domLoaded_) {
            return observer();
          } else {
            return readyObservers_.push(observer);
          }
        }
      }
    }
  };

  loadApp = buildAppLoader();

  customAPI();

  onReady(domReady());

}).call(this);
